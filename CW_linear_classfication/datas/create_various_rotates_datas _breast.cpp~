#include <iostream>
#include <fstream>
#include <string>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;


#define NB_PTS_TO_USE 200


double get_value_normalized(double value_to_normalize, double max, double min, double new_max, double new_min)
{
	double value_normalized((value_to_normalize-min)/(max-min)*(new_max-new_min)+new_min);//cf Min-max normalization
	return value_normalized;
}



int main(int argc, char** argv)
{

	if(argc!=2) return -1;
	else 
	{
		string title_doc(argv[1]);

	int NB_PTS(0), NB_COORD(0), NB_CLASS(0);
	string mot("");

	ofstream fichier_sortie(title_doc+".txt");
	ifstream fichier_bis("breast-cancer-wisconsin_ter.data");
  if(fichier_bis && monFlux)
	{
		fichier_bis.seekg(0, ios::beg);//placed at the very beginning
		fichier_bis >> mot;
		NB_PTS=stoi(mot);
		fichier_sortie << NB_PTS;
		fichier_bis >> mot;
		NB_COORD=stoi(mot);
		fichier_sortie << NB_COORD;
		fichier_bis >> mot;
		NB_CLASS=stoi(mot);
		fichier_sortie << NB_CLASS;
	}
	else
	{
		cout << "ERROR: Cannot open fichier_bis" << endl;
	}
	fichier_bis.close();



	int nbre_datas(0), nb_rand(0);	
	vector<double> mat_coords=new double[NB_PTS_TO_USE];
	vector<string> mon_dico;
	srand(time(0));



	//opening the file class 0 (-1)
	ifstream fichier("breast-cancer-wisconsin_ter.data");
  if(fichier )
	{
		fichier.seekg(0, ios::beg);//placed at the very beginning 
		//string ligne;
		getline(fichier, ligne);
		nbre_datas=stoi(ligne);//getting the number of files

		for(int i=0; i<NB_PTS_TO_USE; i++)
		{
			nb_rand = rand() % NB_PTS;//generate a random nbre in order to know which random file to use to get the datas
			//cout << nb_rand << endl;
			num_files_used_class_0.push_back(nb_rand);//we keep it to know which file had been used
			fichier.seekg(0, ios::beg);
			fichier >> mot;//read nb_of_pt
			fichier >> mot;//read nb_of_att
			fichier >> mot;//read nb_of_class
			int k(0);

			while(k<nb_rand)
			{
				for(int j=0; j<NB_COORD; j++) 
				{
					fichier >> mot; //we do a 'for' until we are at the requested line
					if(j!=0 && k==nb_rand-1)
					{
						fichier_sortie << (stod(mot)-1)/9 << " ";
						if(j==NB_COORD-1) fichier_sortie << endl; 
					}
				}
				k++;
			}
		}


	}
  else
  {
      cout << "ERREUR: Impossible d'ouvrir le fichier en lecture." << endl;
  }
	//fichier.close(); //done automatically?


/////////////////////////////////////////

//initialization of mat of min
for(int j=0; j<(int)mon_dico.size(); j++)
{	
	bag_of_words_min[j]=mat_bag_of_words_class0[0][j];
}

//calc of the min
for(int i=0; i<NBRE_FILES_USED; i++)
{	
	for(int j=0; j<(int)mon_dico.size(); j++)
	{	
		if(bag_of_words_min[j]>mat_bag_of_words_class0[i][j])	bag_of_words_min[j]=mat_bag_of_words_class0[i][j];
		if(bag_of_words_min[j]>mat_bag_of_words_class1[i][j])	bag_of_words_min[j]=mat_bag_of_words_class1[i][j];
	}
}


		


		monFlux << 2*NBRE_FILES_USED << endl;
		monFlux << (int)mon_dico.size() << endl;
		monFlux << 2 << endl;

//CODE COPY
		for(int i=0; i<NBRE_FILES_USED; i++)
		{	
			
			for(int j=0; j<(int)mon_dico.size(); j++) 
			{
				mat_bag_of_words_class0[i][j]=get_value_normalized(mat_bag_of_words_class0[i][j], bag_of_words_max[j], bag_of_words_min[j], 1, 0);
				if(mat_bag_of_words_class0[i][j]>0) monFlux << j << " : " << mat_bag_of_words_class0[i][j] << " ";				
			}
			monFlux << mon_dico.size() << " : " << "0" << endl;



			for(int j=0; j<(int)mon_dico.size(); j++) 
			{
				mat_bag_of_words_class1[i][j]=get_value_normalized(mat_bag_of_words_class1[i][j], bag_of_words_max[j], bag_of_words_min[j], 1, 0);
				if(mat_bag_of_words_class1[i][j]>0) monFlux << j << " : " << mat_bag_of_words_class1[i][j] << " ";				
			}
			monFlux << mon_dico.size() << " : " << "1" << endl;
		}


	}

	return EXIT_SUCCESS;
	}
}
