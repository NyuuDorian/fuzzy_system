//GET THE SIGN TO GET THE CLASS ! :D 

#include <iostream>
#include <fstream>
#include <string>
#include <cmath>
#include <ctgmath>
#include <vector>
#include <cstdlib>

using namespace std;

//#define PHI 0 
//#define ETA 0

#define NBRE_ITERATION 5

//calculate the value of the membership value
double get_value_membership_function(double x, double k, double L)
{
	double value_membership(0), a(0), b(0);
	a=(k-1)/(L-1);
	b=1/(L-1);
	value_membership=max((double)1-(std::fabs(x-a)/b),(double)0);
	return value_membership;
}


//MU=calculate_MU_i_plus_1(MU, SIGMA, matrice_of_all_coord[j], ALPHA, matrice_of_all_value[j], NBRE_COORD);

double* calculate_MU_i_plus_1(double* MU_i, double* SIGMA_i, double* X_i, double alpha_i, int y_i, int dim)
{
	double* new_MU=new double[dim];
	for(int j=0; j<dim; j++)
	{
		//if(X_i[j]!=0) cout << j << "\tinit_new_MU " << new_MU[j] << "\tnew_MU_calc ";
		new_MU[j]=MU_i[j]+alpha_i*y_i*SIGMA_i[j]*X_i[j];
		/*if(X_i[j]!=0)
		{
			//cout << new_MU[j] << "\tMU " << MU_i[j] << "\tSIGMA " << SIGMA_i[j] << "\tX_i " << X_i[j] << "\talpha_i " << alpha_i << "\ty_i " << y_i << endl; //HELP to detect the error
		}*/
	}
	return new_MU;
}

double* calculate_inverse_SIGMA_i(double* SIGMA, int dim)
{
	double* inverse_SIGMA=new double[dim];
	for(int i=0; i<dim; i++)
	{
		if(SIGMA[i]==0) inverse_SIGMA[i]=0;
		else inverse_SIGMA[i]=1/SIGMA[i];
	}
	return inverse_SIGMA;
}

double* calculate_inverse_SIGMA_i_plus_1(double* inverse_SIGMA_i, double* DIAG_X_i, double alpha_i, double phi, int dim)
{
	double* new_inverse_SIGMA=new double[dim];
	for(int j=0; j<dim; j++)
	{
		new_inverse_SIGMA[j]=inverse_SIGMA_i[j]+2*alpha_i*phi*DIAG_X_i[j];
	}	
	return new_inverse_SIGMA;
}

double* diag_X_i( double* X, int dim)
{
	double* diag_X = new double[dim];
	for(int i=0; i<dim; i++)
	{
		diag_X[i]=pow(X[i],2);
	}
	return diag_X;
}


double calculate_GAMMA_i(int y_i, double* x_i, double* MU_i, double* SIGMA_i, int dim, double PHI)
{
	double GAMMA(0), M_i(0), V_i(0);
	
//M_i=y_i*(x_i*MU_i);
	for(int j=0; j<dim; j++)
	{
		M_i+=x_i[j]*MU_i[j];
	}
	M_i*=y_i;
//	cerr << "M_i " << M_i << "\t";

//V_i=tranposee_x_i*SIGMA_i*x_i;
	for(int j=0; j<dim; j++)
	{
		V_i+=x_i[j]*SIGMA_i[j]*x_i[j];
	}
	if(V_i==0) V_i=0.00000001;

//	cerr << "V_i " << V_i << "\t";

//	double tmp((1+2*PHI*M_i ) - (8 * PHI * (M_i -PHI*V_i )));

	GAMMA=( -(1+2*PHI*M_i) + sqrt( pow(1+2*PHI*M_i, 2 ) - (8 * PHI * (M_i -PHI*V_i )) ))/(4*PHI*V_i);
	

//	cerr << "tmp " << tmp << "\t";
//	cerr << "GAMMA " << GAMMA << endl;

	return GAMMA;
}


//ALPHA=calculate_ALPHA_i(matrice_of_all_value[j], matrice_of_all_coord[j], MU, SIGMA, NBRE_COORD, phi);
double calculate_ALPHA_i(int y_i, double* x_i, double* MU_i, double* SIGMA_i, int dim, double PHI)
{
	double ALPHA(0), GAMMA=calculate_GAMMA_i(y_i, x_i, MU_i, SIGMA_i, dim, PHI);
	ALPHA=max(GAMMA, (double)0);
//	cout << ALPHA << endl;
	return ALPHA;
}



int main(int argc, char** argv)
{
	

if(argc!=2) return -1;
else
{
	string title_doc(argv[1]);
		
	
	int NBRE_POINTS(0), NBRE_COORD(0), NBRE_CLASSES(0);

	ifstream fichier(title_doc+".txt");
	if(fichier)
	{
		fichier.seekg(0, ios::beg);//placed at the very beginning 
		//will able us to get each word

		fichier >> NBRE_POINTS;
		cout << NBRE_POINTS << endl;
		fichier >> NBRE_COORD;
		cout << NBRE_COORD << endl;
		fichier >> NBRE_CLASSES;
		cout << NBRE_CLASSES << endl; 
	}
	else cout << "Cannot open the file to read" << endl;

	double phi=1; //confidence parameter φ = Φ^(-1)(η); ou Φ^(-1) est la fonction inverse de Φ
	double a = 0.1; //initial variance parameter, a>0



//	initialisation 

	double* MU=new double[NBRE_COORD]; // all points initialized to 0
	double* SIGMA=new double[NBRE_COORD]; //TODO LIST : SIGMA[0] = a * I avec I matrice unite ds d_x_d
	double* inverse_SIGMA=new double[NBRE_COORD]; 
	double ALPHA(0);
	double** matrice_of_all_coord= new double*[NBRE_POINTS];
	int* matrice_of_all_value= new int[NBRE_POINTS];//value -1 or +1
	int* matrice_of_all_prediction_value= new int[NBRE_POINTS];//value -1 or +1
	bool can_read_next(true);

	for(int i=0; i<NBRE_POINTS; i++) matrice_of_all_coord[i]=new double[NBRE_COORD]; 

//TODO LIST INITIATE matrice_of_all_coord ==> DONE
//TODO LIST INITIATE matrice_of_all_value ==> DONE
//TODO LIST CALC matrice_of_all_prediction_value --> sign(x.w) ==> DONE
	//ifstream fichier("output_bis.txt");
  if(fichier)
	{
		fichier.seekg(0, ios::beg);//placed at the very beginning 
		string mot("");//will able us to get each word

		fichier >> mot;
		fichier >> mot;
		fichier >> mot;

		for(int i=0; i<NBRE_POINTS; i++)
		{
			//std::vector<double> tempvector,tempvector2;
			//coord.push_back(0);
			//
			//cout << nb_rand << endl;
			//num_files_used_class_0.push_back(nb_rand);//we keep it to know which file had been used


//TODO LIST have to change the way of reading the file ==> DONE
			for(int j=0; j<NBRE_COORD; j++) 
			{
				if(can_read_next) 
				{
					fichier >> mot;	//read "place"
					can_read_next=false;					
				}
		
				if(j==stoi(mot)) 
				{
					fichier >> mot; //read ":"
					fichier >> mot;	//read "normalized nb"
				//cout << mot << " ";
				//tempvector.push_back(stod(mot));
					matrice_of_all_coord[i][j]=stod(mot);
					can_read_next=true;
				}
				else matrice_of_all_coord[i][j]=0;
			}

			if(stoi(mot)!=NBRE_COORD)
				fichier >> mot; //read NBRE_COORD IFF this one has not already been read before
			//cout << mot << "\t";
			fichier >> mot;	//read ":"
			//cout << mot << "\t";
	
			//coord.push_back(tempvector);
			fichier >> mot;	//read CLASS
			//cout << mot << endl;
			if(stoi(mot)==0) matrice_of_all_value[i]=-1;			
			else matrice_of_all_value[i]=stoi(mot);
			//class_value.push_back(stoi(classe));

			can_read_next=true;
			//cout << matrice_of_all_value[i] << " ";
		}
	}
  else
  {
      cout << "ERROR: Cannot open fichier on reading mode." << endl;
  }


//INITIALIZATION OF SIGMA, only for i=0, the others members have to be calculated by the algorithm
	for(int j=0; j<NBRE_COORD; j++)
	{
		SIGMA[j]=a;
		//cout << SIGMA[j] << " ";
		inverse_SIGMA[j]=1/a;
		//cout << inverse_SIGMA[j] << endl;
	}

ofstream test_result("test_result_"+ title_doc +".txt");
if(test_result)
{

	for(int i=0; i<NBRE_ITERATION; i++)
	{
		for(int j=0; j<NBRE_POINTS; j++)
		{
//			cout << j << endl;
			
			//TODO LIST update alpha ==> DONE
//			cerr << j << "\t";
			ALPHA=calculate_ALPHA_i(matrice_of_all_value[j], matrice_of_all_coord[j], MU, SIGMA, NBRE_COORD, phi);

			SIGMA=calculate_inverse_SIGMA_i(inverse_SIGMA, NBRE_COORD);//inverse of inverse gives natural
			
			MU=calculate_MU_i_plus_1(MU, SIGMA, matrice_of_all_coord[j], ALPHA, matrice_of_all_value[j], NBRE_COORD);

			inverse_SIGMA=calculate_inverse_SIGMA_i_plus_1(inverse_SIGMA, diag_X_i(matrice_of_all_coord[i], NBRE_COORD), ALPHA, phi, NBRE_COORD);

			int counter_correct_classification(0);
			double classifier(0);
			//int minus_pos(0), maxi_pos(0), null_pos(0);			

			for( int k=0; k<NBRE_POINTS; k++ )
	    {
	      classifier = 0;
	      for( int l=0; l<NBRE_COORD; l++ ){
	        classifier += matrice_of_all_coord[k][l] * MU[l];
	      }
				//cout << k << " " << classifier << endl;
      	if( classifier > 0 ) matrice_of_all_prediction_value[k] = 1;
      	else if (classifier < 0 ) matrice_of_all_prediction_value[k] = -1;
   			else {matrice_of_all_prediction_value[k]=0; /*cout << "TIC ";*/}
      	if( matrice_of_all_prediction_value[k]==matrice_of_all_value[k] ) counter_correct_classification++;
    	}
			
		if(j==NBRE_POINTS-1) test_result << j << " " << (double)counter_correct_classification*100/NBRE_POINTS << " %" << endl;//" " << minus_pos << " " << maxi_pos << " " << null_pos << endl;
		if(j==NBRE_POINTS-1) cout << "iteration " << i << "\t" << (double)counter_correct_classification*100/NBRE_POINTS << " %" << endl;

		}
	}

}
else cout << "cannot write on test_result" << endl;




	return EXIT_SUCCESS;
}
}
